{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 AppleColorEmoji;
\f3\froman\fcharset0 Times-Bold;\f4\froman\fcharset0 Times-Roman;\f5\fnil\fcharset0 LucidaGrande;
\f6\fmodern\fcharset0 Courier;\f7\fnil\fcharset0 Menlo-Regular;\f8\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red0\green0\blue0;\red0\green0\blue0;
\red0\green0\blue0;\red179\green179\blue179;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c50196\c50196\c50196;\csgray\c0;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c0\c84706;\cssrgb\c75294\c75294\c75294;\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid402\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid502\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid602\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid603\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid702\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\paperw11900\paperh16840\margl1440\margr1440\vieww18480\viewh15200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 ### **Projekt-Dokumentation: Automatisches PDF-Ausf\'fcllen mit Dummy-Daten und YoDA-Kit**\
\
---\
\
## **\'dcberblick**  \
Das Ziel war es, eine Pipeline zu erstellen, die:\
1. **PDF-Dateien automatisch ausf\'fcllt** mithilfe von Dummy-Daten.  \
2. Ein **Dummy-Modell trainiert**, das die Felder in der PDF simuliert.  \
3. Eine einfache **Inferenz** ausf\'fchrt, um die PDF automatisch zu generieren.  \
\
---\
\
## **Projektstruktur**\
\
 **`PDFs-KI-Model`** und nutzt den `ai-starter-kit`-Ordner. Die relevanten Skripte befinden sich in folgenden Verzeichnissen:\
\
```\
ai-starter-kit/\
\uc0\u9474 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \'a9\'c0
\f0 \uc0\u9472 \u9472  yoda/\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  train.py                # Trainings-Skript f\'fcr Dummy-Modell\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  generative_data_prep.py # Datenvorbereitung f\'fcr das Training\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  run_yoda_pipeline.sh    # Bash-Skript f\'fcr die gesamte Pipeline\
\uc0\u9474    \u9492 \u9472 \u9472  output/                 # Speicherort f\'fcr das trainierte Modell\
\uc0\u9474 \

\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  data_extraction/\
\uc0\u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  scripts/\
\uc0\u9474    \u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  generate_dummy_data.py  # Dummy-Daten erstellen (JSON)\
\uc0\u9474    \u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  create_pdf.py           # PDF-Template erstellen\
\uc0\u9474    \u9474    
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  fill_pdf_from_json.py   # PDF mit Dummy-Daten f\'fcllen\
\uc0\u9474    \u9474    \u9492 \u9472 \u9472  infer_and_fill_pdf.py   # Inferenz zur automatischen PDF-Erstellung\
\uc0\u9474    \u9474 \
\uc0\u9474    \u9492 \u9472 \u9472  data/\
\uc0\u9474        
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  dummy_data.json         # Dummy-Daten f\'fcr Testzwecke\
\uc0\u9474        
\f1 \'a9\'c0
\f0 \uc0\u9472 \u9472  simple_template.pdf     # Template-PDF mit Feldern\
\uc0\u9474        \u9492 \u9472 \u9472  inference_filled.pdf    # Endg\'fcltige, ausgef\'fcllte PDF\
```\
\
---\
\
## **Schritt-f\'fcr-Schritt Anleitung**\
\
### **Schritt 1: Virtuelle Umgebung erstellen**\
Erstelle eine Python-Umgebung, um die Abh\'e4ngigkeiten zu isolieren:\
\
```bash\
cd ai-starter-kit/data_extraction\
python3 -m venv venv\
source venv/bin/activate\
pip install --upgrade pip\
pip install fpdf reportlab\
```\
\
---\
\
### **Schritt 2: Dummy-Daten erstellen**  \
**Skript**: `generate_dummy_data.py`  \
**Beschreibung**: Erstellt Dummy-Daten im JSON-Format.\
\
**Ausf\'fchrung**:  \
```bash\
cd ai-starter-kit/data_extraction/scripts\
python3 generate_dummy_data.py\
```\
\
**Ergebnis**: Datei `dummy_data.json` im `../data`-Ordner.\
\
---\
\
### **Schritt 3: PDF-Template erstellen**  \
**Skript**: `create_pdf.py`  \
**Beschreibung**: Erstellt eine einfache PDF-Datei als Template.\
\
**Ausf\'fchrung**:  \
```bash\
python3 create_pdf.py\
```\
\
**Ergebnis**: PDF-Datei `simple_template.pdf` im `../data`-Ordner.\
\
---\
\
### **Schritt 4: PDF mit Dummy-Daten f\'fcllen**  \
**Skript**: `fill_pdf_from_json.py`  \
**Beschreibung**: F\'fcllt die PDF-Datei basierend auf den Dummy-Daten.\
\
**Ausf\'fchrung**:  \
```bash\
python3 fill_pdf_from_json.py\
```\
\
**Ergebnis**: Datei `filled_pdf.pdf` im `../data`-Ordner.\
\
---\
\
### **Schritt 5: Trainingspipeline mit YoDA**  \
**Bash-Skript**: `run_yoda_pipeline.sh`  \
**Beschreibung**: F\'fchrt die komplette Pipeline f\'fcr das YoDA-Training aus.\
\
**Ausf\'fchrung**:  \
1. Navigiere in das `yoda`-Verzeichnis:  \
   ```bash\
   cd ai-starter-kit/yoda\
   ```\
\
2. Pipeline ausf\'fchren:  \
   ```bash\
   ./run_yoda_pipeline.sh\
   ```\
\
**Ablauf des Skripts**:\
1. **JSON in JSONL umwandeln**: Trainingsdaten werden vorbereitet.  \
2. **Datenverarbeitung**: JSONL-Datei wird vorverarbeitet.  \
3. **Training**: Ein Dummy-Modell wird erstellt und in **`output/trained_model/model.json`** gespeichert.\
\
---\
\
### **Schritt 6: Inferenz \'96 PDF automatisch ausf\'fcllen**  \
**Skript**: `infer_and_fill_pdf.py`  \
**Beschreibung**: L\'e4dt das trainierte Modell und f\'fcllt eine PDF-Datei automatisch aus.\
\
**Ausf\'fchrung**:  \
```bash\
python3 infer_and_fill_pdf.py\
```\
\
**Ergebnis**: Die ausgef\'fcllte PDF wird als `inference_filled.pdf` gespeichert.\
\
---\
\
## **Wichtige Bash-Befehle f\'fcr die Tests**\
\
Erstelle ein Bash-Skript **`test_pipeline.sh`**, um alles automatisch zu testen:\
\
```bash\
#!/bin/bash\
\
# Sicherstellen, dass das Skript im richtigen Hauptverzeichnis ausgef\'fchrt wird\
echo "=== Schritt 1: Virtuelle Umgebung erstellen ==="\
cd "$(dirname "$0")/data_extraction"\
python3 -m venv venv\
source venv/bin/activate\
pip install --upgrade pip\
pip install fpdf reportlab\
\
echo "=== Schritt 2: Dummy-Daten erstellen ==="\
cd scripts\
python3 generate_dummy_data.py\
\
echo "=== Schritt 3: PDF-Template erstellen ==="\
python3 create_pdf.py\
\
echo "=== Schritt 4: PDF mit Dummy-Daten f\'fcllen ==="\
python3 fill_pdf_from_json.py\
\
echo "=== Schritt 5: YoDA-Trainingspipeline ausf\'fchren ==="\
cd ../../yoda\
./run_yoda_pipeline.sh\
\
echo "=== Schritt 6: Inferenz zur PDF-Erstellung ==="\
cd ../data_extraction/scripts\
python3 infer_and_fill_pdf.py\
\
echo "
\f2 \uc0\u9989 
\f0  Pipeline erfolgreich abgeschlossen!"\
\
```\
\
---\
\
## **Ausf\'fchrung des Bash-Skripts**\
\
1. Stelle sicher, dass das Skript ausf\'fchrbar ist:\
   ```bash\
   chmod +x test_pipeline.sh\
   ```\
\
2. F\'fchre das Skript aus:\
   ```bash\
   ./test_pipeline.sh\
   ```\
\
---\
\
## **Zusammenfassung der Schritte**\
\
1. Dummy-Daten erstellen.  \
2. PDF-Template erstellen.  \
3. PDF mit Dummy-Daten f\'fcllen.  \
4. Dummy-Modell mit YoDA-Kit trainieren.  \
5. Inferenz durchf\'fchren und die PDF automatisch ausf\'fcllen.\
\
---\
\
## **Ergebnis**\
Die finale PDF-Datei befindet sich unter:  \
**`ai-starter-kit/data_extraction/data/inference_filled.pdf`**\
\
\
\
\
\
\
\pard\pardeftab720\sa298\partightenfactor0

\f3\b \cf0 \expnd0\expndtw0\kerning0
Pipeline-Ergebnisse:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Dummy-Daten
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Generiert und gespeichert in: 
\f6 data_extraction/data/dummy_data.json
\f4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Template-PDF
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Erstellt und gespeichert in: 
\f6 data_extraction/data/simple_template.pdf
\f4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Ausgef\'fcllte PDF mit Dummy-Daten
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
PDF gef\'fcllt mit den Dummy-Daten: 
\f6 data_extraction/data/filled_pdf.pdf
\f4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
YoDA-Trainingspipeline
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Trainingsdaten verarbeitet und gespeichert: 
\f6 yoda/data/output/preprocessed/preprocessed_data.jsonl
\f4 \
\ls1\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Trainiertes Modell gespeichert in: 
\f6 yoda/output/trained_model/model.json
\f4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Automatisch ausgef\'fcllte PDF
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Final generierte PDF mit Modell-Inferenz: 
\f6 data_extraction/data/inference_filled.pdf
\f4 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa298\partightenfactor0

\f3\b \cf0 N\'e4chste Schritte zur Umsetzung als SaaS:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Cloud-Speicherung
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Speichere hochgeladene PDFs und Dummy-Daten in 
\f3\b AWS S3
\f4\b0 .\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Bereitstellung des YoDA-Modells f\'fcr Inferenz in 
\f3\b AWS SageMaker
\f4\b0  oder 
\f3\b AWS Lambda
\f4\b0 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
API-Integration
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Entwickle eine 
\f3\b API
\f4\b0  mit 
\f3\b FastAPI
\f4\b0  oder 
\f3\b Flask
\f4\b0 , um PDFs hochzuladen und automatisch zu verarbeiten.\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Bereitstellung als REST-API, die Anfragen verarbeitet und die fertige PDF zur\'fcckgibt.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Skalierbarkeit
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Implementiere 
\f3\b Terraform
\f4\b0 , um AWS-Ressourcen zu erstellen und zu verwalten.\
\ls2\ilvl1\kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Optimiere die Pipeline f\'fcr parallele Verarbeitung gro\'dfer Datenmengen.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Frontend f\'fcr Benutzer
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f5 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
Baue eine 
\f3\b Weboberfl\'e4che
\f4\b0  mit 
\f3\b React
\f4\b0 , um Benutzern die einfache Interaktion mit der Anwendung zu erm\'f6glichen.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls2\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Deployment
\f4\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
Nutze 
\f3\b Docker
\f4\b0  und 
\f3\b Kubernetes
\f4\b0 , um die Anwendung als skalierbaren Service bereitzustellen.\
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf0 \
\
\
\
# Virtuelle Umgebung aktivieren\
cd /Users/kareem/Desktop/PDFs-KI-Model/ai-starter-kit\
\
source venv/bin/activate\
\
# Abh\'e4ngigkeiten installieren\
cd data_extraction\
pip install -r requirements.txt\
pip install Pillow==9.5.0\
cd ..\
\
# Backend starten\
python app.py\
\
# Pipeline testen\
bash ./run_complete_pipeline.sh customers.csv\
\
# Datei-Upload aus dem computer  testen\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\fs22 \cf3 \kerning1\expnd0\expndtw0 \CocoaLigature0 curl -X POST -F "file=@/Users/kareem/Downloads/customers.csv" http://127.0.0.1:5000/upload
\f4\fs36 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\sa319\partightenfactor0

\f3\b\fs24 \cf0 \outl0\strokewidth0 \strokec4 Backend starten\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f4\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 F\'fchre das Backend aus:
\f6\fs26 bash\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 python app.py\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Das Backend sollte auf 
\f6\fs26 http://127.0.0.1:5000
\f4\fs24  laufen.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Im Terminal solltest du eine Best\'e4tigung sehen, dass das Backend l\'e4uft:
\f6\fs26 csharp\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 * Running on http://127.0.0.1:5000\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\pardeftab720\partightenfactor0
\cf7 \strokec7 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 \strokec4 2. Frontend starten\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f4\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Wechsle in das Frontend-Verzeichnis und starte den Server:
\f6\fs26 bash\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 npm run serve\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls4\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Der Frontend-Server sollte auf 
\f6\fs26 http://localhost:8080
\f4\fs24  laufen.\
\pard\pardeftab720\partightenfactor0
\cf7 \strokec7 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 \strokec4 3. Frontend \'f6ffnen\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f4\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Gehe im Browser auf die Route:
\f6\fs26 bash\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 http://localhost:8080/upload\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls5\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Du solltest das Upload-Formular sehen.\
\pard\pardeftab720\partightenfactor0
\cf7 \strokec7 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 \strokec4 4. Datei hochladen\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f4\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 W\'e4hle eine 
\f3\b CSV-
\f4\b0  oder 
\f3\b JSON-Datei
\f4\b0  aus und lade sie hoch.\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Sobald du auf den 
\f3\b Upload-Button
\f4\b0  klickst:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Das Frontend sendet eine 
\f6\fs26 POST
\f4\fs24 -Anfrage an das Backend-Endpunkt:
\f6\fs26 arduino\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 http://127.0.0.1:5000/upload\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\pardeftab720\partightenfactor0
\cf7 \strokec7 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 \strokec4 5. Was sollte passieren?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Backend verarbeitet die Datei:
\f4\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Die Datei wird im Ordner 
\f6\fs26 ./data_extraction/data/customers/
\f4\fs24  gespeichert.\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Beispiel: Eine hochgeladene 
\f6\fs26 customers.csv
\f4\fs24  wird hier abgelegt:
\f6\fs26 bash\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 ./data_extraction/data/customers/customers.csv\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Pipeline wird ausgef\'fchrt:
\f4\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Das Backend ruft das Script 
\f6\fs26 run_complete_pipeline.sh
\f4\fs24  auf.\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Die Pipeline verarbeitet die Datei:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\partightenfactor0
\ls7\ilvl2\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Pr\'fcft die Daten (JSON/CSV).\
\ls7\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Erstellt PDFs basierend auf den Kundendaten.\
\ls7\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Speichert die PDFs im Ordner:
\f6\fs26 bash\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 ./data_extraction/data/output/customer_pdfs/\
\ls7\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls7\ilvl0
\f3\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Frontend erh\'e4lt die Antwort:
\f4\b0 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Nach erfolgreicher Verarbeitung sendet das Backend eine JSON-Antwort zur\'fcck.\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Beispiel-Antwort:
\f6\fs26 json\uc0\u8232 
\f8\fs22 \cf5 \cb6 \strokec5 Code kopieren
\f6\fs26 \cf0 \cb1 \strokec4 \uc0\u8232 \u8232 \u8232 \{\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4   "status": "success",\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4   "message": "Pipeline abgeschlossen",\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4   "output_path": "./data_extraction/data/output/customer_pdfs/"\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \}\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u8232 \u8232 
\f4\fs24 \
\pard\pardeftab720\partightenfactor0
\cf7 \strokec7 \
\pard\pardeftab720\sa319\partightenfactor0

\f3\b \cf0 \strokec4 6. Frontend zeigt das Ergebnis an\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f4\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Das Frontend sollte die erfolgreiche Verarbeitung anzeigen:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls8\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Nachricht: 
\f3\b "Pipeline abgeschlossen"
\f4\b0 \
\ls8\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 M\'f6glichkeit, die erstellten PDFs herunterzuladen.\
\pard\tx720\tx1440\pardeftab720\partightenfactor0

\fs36 \cf0 \outl0\strokewidth0 \
}